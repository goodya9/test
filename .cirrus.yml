task:
  name: rom
  only_if: $CIRRUS_REPO_OWNER == 'NFS86'
  timeout_in: 240m
  container:
    image: anggit86/ubuntu:21.10
    cpu: 8
    memory: 32G
    
  env:
    BUILD_HOSTNAME: "nfs-project"
    rcloneconfig: "ENCRYPTED[44ffa3857f6328b03c137af6abf4f1aed91717c51cb06ae8c8fae74d96c0e8cc473a802fa8328e48c414c2de236fe21d]"
    CIRRUS_CLONE_DEPTH: 1
    CIRRUS_CPU: 15
    CIRRUS_TIMEOUT_IN: 240m
    CIRRUS_WORKING_DIR: /home/cirrus-ci-build

  Environment_script:
     - cat /etc/os* && env && nproc && gcc --version && clang --version

  Show_Command_script:
     - cat $CIRRUS_WORKING_DIR/build.sh
     
  Storage-Check_script:
     - df -h && lsblk && ls -l -a -h

  Sync_rom_script:
     - set -exv
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - mkdir -p $CIRRUS_WORKING_DIR/rom/$name_rom
     - cd $CIRRUS_WORKING_DIR/rom/$name_rom
     - rm -rf .repo/local_manifests
     - command=$(head $CIRRUS_WORKING_DIR/build.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1))
     - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build.sh)
     - bash -c "$command" || true
     
     - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/Sync_rom.log
     - a=$(grep 'Cannot remove project' Sync_rom.log -m1|| true)
     - b=$(grep "^fatal: remove-project element specifies non-existent project" Sync_rom.log -m1 || true)
     - c=$(grep 'repo sync has finished' Sync_rom.log -m1 || true)
     - if [[ $a == *'Cannot remove project'* ]]
     - then
     - a=$(echo $a | cut -d ':' -f2)
     - rm -rf $a
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - elif [[ $b == *'remove-project element specifies non-existent'* ]]
     - then exit 1
     - elif [[ $c == *'repo sync has finished'* ]]
     - then true
     - else
     - (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")
     - fi
     
     - rm -rf Sync_rom.log
  
  Load_script:
     - ./load.sh
     
  Build_rom_script:
     - set -e
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - device=$(grep unch $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
     - cd $CIRRUS_WORKING_DIR/rom/$name_rom
     - export ALLOW_MISSING_DEPENDENCIES=true
     - export CCACHE_DIR=$CIRRUS_WORKING_DIR/rom/$name_rom/ccache
     - export CCACHE_EXEC=$(which ccache)
     - export USE_CCACHE=1
     - export CCACHE_COMPRESS=true
     - ccache -o run_second_cpp=true
     - ccache -o depend_mode=true
     - ccache -o direct_mode=true
     - ccache -o file_clone=true
     - ccache -o inode_cache=true
     - ccache -M 0
     - ccache -F 0
     - ccache - a fast C/C++ compiler cache
     - ccache -c && ccache -z
     - command=$(tail $CIRRUS_WORKING_DIR/build.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v '# upload rom')
     - bash -c "$command"
     
  Ccache_info_script:
     - set -e
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - export CCACHE_DIR=$CIRRUS_WORKING_DIR/rom/$name_rom/ccache
     - ccache -s

  Upload_build_script:
     - ./ziping.sh
