env:
  rcloneconfig: "ENCRYPTED[44ffa3857f6328b03c137af6abf4f1aed91717c51cb06ae8c8fae74d96c0e8cc473a802fa8328e48c414c2de236fe21d]"
  TG_TOKEN: "ENCRYPTED[721861fde8c3e97670a0393d740968cb417613f82627fcfea3f7ebf0fda19397760da0bbcc013c60a72f5e8b4ec08e0a]"
  TG_CHAT_ID: "ENCRYPTED[91026bae9e75f86df0f9a5c1c2c0256b4182a705447dad7b992aa62758fc09292e08cea9f8909a474d1a9daf99c3cfd3]"
  WORKDIR: "ENCRYPTED[d8dfbe2cc40a744e88b435be4c636b583f2341b4de49f052c1f9fc0303a8c2e32b71a1188906b694a04497014c1db486]"
  CIRRUS_CLONE_DEPTH: "1"

task:
  name: "Setting Up, Syncing, Building and Uploading"
  only_if: $CIRRUS_REPO_OWNER == 'NFS86'
  timeout_in: 120m
  container:
    image: anggit86/ubuntu:21.10
    cpu: 8
    memory: 32G

  Environment-Check_background_script:
     - cat /etc/os* && env && nproc && gcc --version && clang --version
     - mkdir -p ~/.config/rclone
     - echo "$rcloneconfig" > ~/.config/rclone/rclone.conf
  
  Load-rom_background_script:
     - ./load.sh

  Storage-Check_background_script:
     - df -h && lsblk && ls -l -a -h
     
  Sync_rom_script:
     - ./sync.sh
  
  Build_rom_script:
     - set -e
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - device=$(grep unch $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
     - cd $WORKDIR/rom/$name_rom
     - export ALLOW_MISSING_DEPENDENCIES=true
     - export CCACHE_DIR=$WORKDIR/ccache
     - export CCACHE_EXEC=$(which ccache)
     - export USE_CCACHE=1
     - export CCACHE_COMPRESS=true
     - export PATH="/usr/lib/ccache:$PATH"
     - which clang clang++
     - ccache -o file_clone=true
     - ccache -o inode_cache=true
     - ccache -M 100
     - ccache - a fast C/C++ compiler cache
     - ccache -c && ccache -z
     - command=$(tail $CIRRUS_WORKING_DIR/build.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v '# upload rom')
     - bash -c "$command"
     
  Ccache_info_script:
     - set -e
     - export CCACHE_DIR=$WORKDIR/ccache
     - ccache -s

  Upload_build_script:
     - ./ziping.sh
