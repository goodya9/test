task:
  name: rom
  timeout_in: 120m
  container:
    dockerfile: Ubuntu-20.04
    cpu: 8
    memory: 32G
  env:
    BUILD_HOSTNAME: "nfs-project"
    rcloneconfig: nanti dolo
    CIRRUS_CLONE_DEPTH: 1
    CIRRUS_WORKING_DIR: /home/cirrus-ci-build
    device: rosy
  Environment_script:
     - cat /etc/os* && env && nproc && gcc --version && clang --version
  Storage-Check_script:
     - df -h && lsblk && ls -l -a -h
  Sync_rom_script:
     - set -exv
     - sudo mkdir ~/.ssh && sudo chmod 0700 ~/.ssh
     - eval `ssh-agent -s`
     - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - mkdir -p $CIRRUS_WORKING_DIR/rom/$name_rom
     - cd $CIRRUS_WORKING_DIR/rom/$name_rom
     - rm -rf .repo/local_manifests
     - command=$(head $CIRRUS_WORKING_DIR/build.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1))
     - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build.sh)
     - bash -c "$command" || true
     
     - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/sync.log
     - a=$(grep 'Cannot remove project' sync.log -m1|| true)
     - b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
     - c=$(grep 'repo sync has finished' sync.log -m1 || true)
     - if [[ $a == *'Cannot remove project'* ]]
     - then
     - a=$(echo $a | cut -d ':' -f2)
     - rm -rf $a
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - elif [[ $b == *'remove-project element specifies non-existent'* ]]
     - then exit 1
     - elif [[ $c == *'repo sync has finished'* ]]
     - then true
     - else
     - (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")
     - fi
    
     - rm -rf sync.log