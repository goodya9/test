task:
  name: rom
  only_if: $CIRRUS_REPO_OWNER == 'NFS86'
  timeout_in: 120m
  container:
    image: gcr.io/cirrus-ci-community/nfs86/builder-ci/ubuntu-2004@sha256:30da834be88d348646ec18fe1a295cf37a3368677d4a1ad3b04c7bcfa681493d
    cpu: 8
    memory: 32G
  env:
    BUILD_HOSTNAME: "nfs-project"
    rcloneconfig: "ENCRYPTED[44ffa3857f6328b03c137af6abf4f1aed91717c51cb06ae8c8fae74d96c0e8cc473a802fa8328e48c414c2de236fe21d]"
    CIRRUS_CLONE_DEPTH: 1
    CIRRUS_WORKING_DIR: /home/cirrus-ci-build
  Environment_script:
     - cat /etc/os* && env && nproc && gcc --version && clang --version
  Storage-Check_script:
     - df -h && lsblk && ls -l -a -h
  Sync_rom_script:
     - set -exv
     - sudo mkdir ~/.ssh && sudo chmod 0700 ~/.ssh
     - eval `ssh-agent -s`
     - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - mkdir -p $CIRRUS_WORKING_DIR/rom/$name_rom
     - cd $CIRRUS_WORKING_DIR/rom/$name_rom
     - rm -rf .repo/local_manifests
     - command=$(head $CIRRUS_WORKING_DIR/build.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1))
     - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build.sh)
     - bash -c "$command" || true
     
     - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/sync.log
     - a=$(grep 'Cannot remove project' sync.log -m1|| true)
     - b=$(grep "^fatal: remove-project element specifies non-existent project" sync.log -m1 || true)
     - c=$(grep 'repo sync has finished' sync.log -m1 || true)
     - if [[ $a == *'Cannot remove project'* ]]
     - then
     - a=$(echo $a | cut -d ':' -f2)
     - rm -rf $a
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - elif [[ $b == *'remove-project element specifies non-existent'* ]]
     - then exit 1
     - elif [[ $c == *'repo sync has finished'* ]]
     - then true
     - else
     - (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")
     - fi
    
     - rm -rf sync.log
  Load_script:
     - ./load.sh
  Build_rom_script:
     - set -e
     - rom_name=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - device=$(grep unch $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
     - grep _jasmine_sprout $CIRRUS_WORKING_DIR/build.sh > /dev/null && device=jasmine_sprout
     - grep _laurel_sprout $CIRRUS_WORKING_DIR/build.sh > /dev/null && device=laurel_sprout
     - cd $CIRRUS_WORKING_DIR/rom/$name_rom
     - export ALLOW_MISSING_DEPENDENCIES=true
     - export CCACHE_DIR=/home/cirrus-ci-build/ccache
     - export CCACHE_EXEC=$(which ccache)
     - export USE_CCACHE=1
     - export CCACHE_COMPRESS=true
     - ccache -M 0
     - ccache -F 0
     - ccache - a fast C/C++ compiler cache
     - ccache -z
     - ls device/*/*/vendorsetup.sh | grep -v generic && echo "Please remove vendorsetup.sh file from device tree, use local manifest for cloning and removing repositories." && exit 1 || true
     - command=$(tail $CIRRUS_WORKING_DIR/build.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v 'rclone copy')
     - bash -c "$command"
     
  Upload_build_script:
     - ./ziping.sh
